#!/usr/bin/env node
// listeur_de_fichiers_et_dossiers.js
// Script Node.js pour lister fichiers et dossiers du r√©pertoire courant - Version YAO-PKG v3.1.2
// Popups PowerShell natifs + Compteur r√©pertoire racine + Syntaxe unifi√©e

const fs = require('fs');
const path = require('path');
const { spawn, execSync } = require('child_process');

// Fonction pour formater le temps d'ex√©cution
function formatDuration(milliseconds) {
  if (milliseconds < 1000) {
    return `${milliseconds}ms`;
  } else if (milliseconds < 60000) {
    const seconds = (milliseconds / 1000).toFixed(2);
    return `${seconds}s`;
  } else {
    const minutes = Math.floor(milliseconds / 60000);
    const seconds = ((milliseconds % 60000) / 1000).toFixed(1);
    return `${minutes}min ${seconds}s`;
  }
}

// Fonction pour afficher une pop-up Windows
function showPopup(title, message) {
  try {
    console.log(`üîî Tentative d'affichage popup: ${title}`);
    
    // Nettoie le message pour PowerShell (une seule fois)
    const cleanTitle = title.replace(/['"]/g, match => match === "'" ? "''" : '""');
    const cleanMessage = message
      .replace(/['"]/g, match => match === "'" ? "''" : '""')
      .replace(/[\r\n]/g, ' | ');
    
    const powershellCmd = `Add-Type -AssemblyName System.Windows.Forms; [System.Windows.Forms.MessageBox]::Show('${cleanMessage}', '${cleanTitle}', 'OK', 'Information')`;
    
    try {
      const result = execSync(`powershell.exe -Command "${powershellCmd}"`, { 
        encoding: 'utf8',
        timeout: 10000 
      });
      console.log(`‚úÖ Popup affich√© avec succ√®s: ${title} - R√©sultat: ${result.trim()}`);
    } catch (execError) {
      console.log(`‚ùå Erreur execSync, tentative spawn: ${execError.message}`);
      
      // Fallback avec spawn simplifi√©
      spawn('powershell.exe', ['-Command', powershellCmd], { stdio: 'ignore' });
    }
    
  } catch (error) {
    // Fallback console
    console.log(`‚ùå Erreur popup, affichage console: ${error.message}`);
    console.log(`\n=== ${title} ===\n${message}\n${'='.repeat(24)}\n`);
  }
}

// Configuration et initialisation
const directory = process.pkg ? process.cwd() : __dirname;
const outputFile = path.join(directory, 'liste_de_fichiers_et_dossiers.txt');
const outputFileName = path.basename(outputFile);
const scriptName = path.basename(__filename);
const exeName = 'listeur_de_fichiers_et_dossiers.exe';
const hasNodeModules = fs.existsSync(path.join(directory, 'node_modules'));

// D√©marrage du chronom√®tre
const startTime = Date.now();
console.log('‚è±Ô∏è D√©marrage du chronom√®tre...');

showPopup(
  'Listeur de fichiers et dossiers - R√âCURSIF',
  `Ce programme explore R√âCURSIVEMENT tous les sous-dossiers et enregistre la liste compl√®te dans "${outputFileName}"`
);

// Fonction r√©cursive pour explorer tous les sous-dossiers
function exploreDirectory(dirPath, relativePath = '') {
  const results = { dirs: [], files: [] };
  const excludedDirs = new Set(['.git', 'node_modules', '$RECYCLE.BIN']);
  
  try {
    const entries = fs.readdirSync(dirPath);
    
    for (const name of entries) {
      // √âvite les fichiers syst√®me et notre propre script/exe
      if (name === scriptName || name === exeName || name === outputFileName) continue;
      
      const fullPath = path.join(dirPath, name);
      const relativeItemPath = path.join(relativePath, name);
      
      try {
        const stats = fs.statSync(fullPath);
        
        if (stats.isDirectory()) {
          // √âvite les dossiers syst√®me/cach√©s
          if (!name.startsWith('.') && !excludedDirs.has(name)) {
            results.dirs.push(relativeItemPath || name);
            
            // Exploration r√©cursive du sous-dossier
            const subResults = exploreDirectory(fullPath, relativeItemPath);
            results.dirs.push(...subResults.dirs);
            results.files.push(...subResults.files);
          }
        } else if (stats.isFile()) {
          results.files.push(relativeItemPath || name);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è Acc√®s refus√©: ${relativeItemPath || name}`);
      }
    }
    
  } catch (error) {
    console.log(`‚ùå Erreur lors de l'exploration de ${dirPath}: ${error.message}`);
  }
  
  return results;
}

console.log('üîç Exploration r√©cursive en cours...');
console.log('üìÅ Analyse de tous les sous-dossiers...');

// üå≥ Fonction pour construire l'arborescence hi√©rarchique
function buildHierarchicalOutput(directory, allDirs, allFiles) {
  const outputLines = [];
  
  // Fonction optimis√©e pour compter les √©l√©ments directs
  function countDirectElements(items, targetPath) {
    const normalizedTarget = targetPath.replace(/\\/g, '/');
    return items.filter(item => {
      const normalized = item.replace(/\\/g, '/');
      if (normalizedTarget === '') {
        return !normalized.includes('/');
      }
      return normalized.startsWith(normalizedTarget + '/') && 
             normalized.replace(normalizedTarget + '/', '').indexOf('/') === -1;
    }).length;
  }
  
  // Fonction r√©cursive pour traiter un dossier et son contenu
  function processDirectory(dirPath, indent = '') {
    const relativePath = path.relative(directory, dirPath);
    const folderName = path.basename(dirPath);
    
    // Trouve les sous-dossiers directs de ce dossier
    const childDirs = allDirs.filter(dir => {
      const dirRelative = dir.replace(/\\/g, '/');
      const parentRelative = relativePath.replace(/\\/g, '/');
      
      if (parentRelative === '') {
        // Pour la racine, cherche les dossiers de niveau 1
        return !dirRelative.includes('/');
      } else {
        // Pour les autres, cherche les sous-dossiers directs
        return dirRelative.startsWith(parentRelative + '/') && 
               dirRelative.replace(parentRelative + '/', '').indexOf('/') === -1;
      }
    }).toSorted();
    
    // Trouve les fichiers directs de ce dossier
    const childFiles = allFiles.filter(file => {
      const fileRelative = file.replace(/\\/g, '/');
      const parentRelative = relativePath.replace(/\\/g, '/');
      
      if (parentRelative === '') {
        // Pour la racine, cherche les fichiers de niveau 1
        return !fileRelative.includes('/');
      } else {
        // Pour les autres, cherche les fichiers directs
        return fileRelative.startsWith(parentRelative + '/') && 
               fileRelative.replace(parentRelative + '/', '').indexOf('/') === -1;
      }
    }).toSorted();

    const totalItems = childDirs.length + childFiles.length;
    const newIndent = relativePath === '' ? '' : indent + '‚îÇ   ';
    
    // Calcule le nombre de chiffres n√©cessaires pour la num√©rotation
    const maxDirNumber = childDirs.length;
    const maxFileNumber = childFiles.length;
    const dirDigits = maxDirNumber > 0 ? maxDirNumber.toString().length : 1;
    const fileDigits = maxFileNumber > 0 ? maxFileNumber.toString().length : 1;
    
    // Traite d'abord les sous-dossiers (r√©cursivement)
    childDirs.forEach((dir, index) => {
      const isLastItem = index === totalItems - 1;
      const dirPrefix = isLastItem ? '‚îî‚îÄ‚îÄ' : '‚îú‚îÄ‚îÄ';
      const fullChildPath = path.join(directory, dir);
      const dirName = path.basename(dir);
      
      // Compte les fichiers et dossiers dans ce dossier
      const relativePath = path.relative(directory, fullChildPath).replace(/\\/g, '/');
      const fileCount = countDirectElements(allFiles, relativePath);
      const dirCount = countDirectElements(allDirs, relativePath);
      
      // Construit l'affichage du compteur optimis√©
      const counterParts = [];
      if (dirCount > 0) counterParts.push(`${dirCount} dossier${dirCount > 1 ? 's' : ''}`);
      if (fileCount > 0) counterParts.push(`${fileCount} fichier${fileCount > 1 ? 's' : ''}`);
      const counterDisplay = counterParts.length ? ` (${counterParts.join(' - ')})` : '';
      
      // Num√©rotation locale des dossiers avec formatage adaptatif
      const localDirNumber = (index + 1).toString().padStart(dirDigits, '0');
      
      // Affiche le dossier avec son num√©ro format√©, le compteur et le bon pr√©fixe
      outputLines.push(`${indent}${dirPrefix} ${localDirNumber}. ${dirName}/${counterDisplay}`);
      
      // Ajuste l'indentation pour les enfants du dernier √©l√©ment
      const childIndent = isLastItem ? indent + '    ' : indent + '‚îÇ   ';
      processDirectory(fullChildPath, childIndent);
    });
    
    // Puis affiche les fichiers de ce dossier
    const fileStartIndex = childDirs.length;
    childFiles.forEach((file, index) => {
      const fileName = path.basename(file);
      const itemIndex = fileStartIndex + index;
      const isLastItem = itemIndex === totalItems - 1;
      const prefix = isLastItem ? '‚îî‚îÄ‚îÄ' : '‚îú‚îÄ‚îÄ';
      
      // Num√©rotation locale des fichiers avec formatage adaptatif
      const localFileNumber = (index + 1).toString().padStart(fileDigits, '0');
      outputLines.push(`${indent}${prefix} ${localFileNumber}. ${fileName}`);
    });
  }
  
  // D√©marre le traitement depuis la racine
  processDirectory(directory);
  
  return outputLines;
}

// Lance l'exploration r√©cursive depuis le dossier racine
const explorationResults = exploreDirectory(directory);
const dirs = explorationResults.dirs;
const files = explorationResults.files;

// üïê Calcul du temps d'exploration
const explorationEndTime = Date.now();
const explorationDuration = explorationEndTime - startTime;

console.log(`üìä R√©sultats: ${dirs.length} dossiers, ${files.length} fichiers trouv√©s`);
console.log(`‚è±Ô∏è Temps d'exploration: ${formatDuration(explorationDuration)}`);

// Formate la date actuelle en fran√ßais (jj/mm/aaaa hh:mm:ss)
const now = new Date().toLocaleString('fr-FR');

// Construction de l'arborescence hi√©rarchique
const hierarchicalLines = buildHierarchicalOutput(directory, dirs, files);

// Calcul des √©l√©ments directs de la racine pour l'en-t√™te
const rootFiles = files.filter(file => !file.includes('/') && !file.includes('\\')).length;
const rootDirs = dirs.filter(dir => !dir.includes('/') && !dir.includes('\\')).length;

// Construction du message de compteur pour la racine avec logique simplifi√©e
const buildRootCounter = (dirs, files) => {
  const counters = [];
  if (dirs > 0) counters.push(`${dirs} dossier${dirs > 1 ? 's' : ''}`);
  if (files > 0) counters.push(`${files} fichier${files > 1 ? 's' : ''}`);
  return counters.length > 0 ? ` (${counters.join(' - ')})` : '';
};

const rootCounterMessage = buildRootCounter(rootDirs, rootFiles);

// En-t√™te du fichier
const outputLines = [];
outputLines.push('='.repeat(80));
outputLines.push('LISTE R√âCURSIVE DES FICHIERS ET DOSSIERS - FORMAT ARBORESCENT');
outputLines.push('='.repeat(80));
outputLines.push(`DOSSIER RACINE ANALYS√â: ${directory}`);
outputLines.push(`DATE DE G√âN√âRATION: ${now}`);
outputLines.push(`STATISTIQUES: ${dirs.length} dossiers, ${files.length} fichiers`);
outputLines.push(`TEMPS D'EXPLORATION: ${formatDuration(explorationDuration)}`);
outputLines.push('MODE: Exploration r√©cursive avec structure arborescente');
outputLines.push('');
outputLines.push('‚ö†Ô∏è  EXCLUSIONS APPLIQU√âES:');
outputLines.push('   ‚Ä¢ node_modules/ (d√©pendances npm)');
outputLines.push('   ‚Ä¢ Dossiers cach√©s (.*)'); 
outputLines.push('   ‚Ä¢ Fichiers syst√®me ($RECYCLE.BIN)');
outputLines.push('='.repeat(80));
outputLines.push('');
outputLines.push('STRUCTURE ARBORESCENTE:');
outputLines.push('='.repeat(80));
outputLines.push(`üìÅ ${path.basename(directory)}/${rootCounterMessage}`);

// Ajoute l'arborescence
outputLines.push(...hierarchicalLines);

outputLines.push('');
outputLines.push('='.repeat(80));
outputLines.push('R√âSUM√â DE L\'EXPLORATION R√âCURSIVE');
outputLines.push('='.repeat(80));
outputLines.push(`TOTAL G√âN√âRAL: ${dirs.length + files.length} √©l√©ments trouv√©s`);
outputLines.push(`D√âTAIL: ${dirs.length} dossiers, ${files.length} fichiers`);
outputLines.push(`TEMPS D'EXPLORATION: ${formatDuration(explorationDuration)}`);
outputLines.push('');
outputLines.push('‚ö†Ô∏è  EXCLUSIONS APPLIQU√âES:');
outputLines.push('   ‚Ä¢ node_modules/ (d√©pendances npm)');
outputLines.push('   ‚Ä¢ Dossiers cach√©s (.*)');
outputLines.push('   ‚Ä¢ Fichiers syst√®me ($RECYCLE.BIN)');
outputLines.push('='.repeat(80));

// √âcrit chaque √©l√©ment un par ligne dans le fichier de sortie
fs.writeFileSync(outputFile, outputLines.join('\n'), 'utf-8');

// üïê Calcul du temps total
const totalEndTime = Date.now();
const totalDuration = totalEndTime - startTime;
const fileGenerationDuration = totalDuration - explorationDuration;

console.log(`üíæ Fichier g√©n√©r√© en ${formatDuration(fileGenerationDuration)}`);
console.log(`‚è±Ô∏è TEMPS TOTAL: ${formatDuration(totalDuration)}`);
console.log(`Liste R√âCURSIVE des fichiers et dossiers enregistr√©e dans "${outputFile}"`);

// Pop-up de confirmation √† la fin 
const nodeModulesMessage = hasNodeModules ? ' | üì¶ Note: Le dossier "node_modules/" (d√©pendances npm) a √©t√© exclu de l\'analyse pour √©viter des milliers d\'√©l√©ments suppl√©mentaires.' : '';
showPopup(
  'Exploration r√©cursive termin√©e !',
  `‚úÖ ${dirs.length + files.length} √©l√©ments trouv√©s dans tous les sous-dossiers ! | üìÅ ${dirs.length} dossiers | üìÑ ${files.length} fichiers | ‚è±Ô∏è Temps total: ${formatDuration(totalDuration)}${nodeModulesMessage} | üíæ Liste sauvegard√©e dans "${outputFileName}"`
);


/*
Pour cr√©er l'ex√©cutable YAO-PKG :
npm run build
.\listeur_de_fichiers_et_dossiers.exe

üéØ Fonctionnalit√©s VERSION 3.1.1 :
- Exploration COMPL√àTE de tous les sous-dossiers
- Popups PowerShell natifs avec System.Windows.Forms.MessageBox
- execSync() puis spawn() en fallback pour popups fiables
- process.pkg pour d√©tection d'environnement yao-pkg
- √âchappement robuste des caract√®res sp√©ciaux dans popups
- Format de sortie hi√©rarchique avec indentation Unix
- Exclusion automatique des dossiers syst√®me (.git, node_modules, etc.)
- Gestion d'erreurs pour les fichiers inaccessibles
- Logs d√©taill√©s pour debugging des popups
- Num√©rotation locale par dossier avec formatage adaptatif
- Compteurs intelligents (dossiers/fichiers s√©par√©s)
- ‚è±Ô∏è CHRONOM√àTRE INT√âGR√â : Mesure temps d'exploration et g√©n√©ration de fichier
- üìÅ COMPTEUR R√âPERTOIRE RACINE : Affichage statistiques du dossier principal
*/